# coding: utf8

k_city = {
    "1": {"def": [1.3, 1]},
    "2": {"2_1": [1.3, 0.8],
        "2_2": [0.7, 0.5]},
    "3": {"3_1": [1.2, 0.8],
        "3_2": [1.1, 0.8],
        "3_3": [1.3, 0.8],
        "3_4": [1.8, 1],
        "3_5": [1, 0.8]},
    "4": {"4_1": [1.3, 0.8],
        "4_2": [0.6, 0.5]},
    "5": {"5_1": [0.7, 0.5],
        "5_2": [0.6, 0.5]},
    "6": {"6_1": [0.8, 0.5],
        "6_2": [0.6, 0.5],
        "6_3": [0.6, 0.5]},
    "7": {"7_1": [1, 0.8],
        "7_2": [0.7, 0.5]},
    "8": {"8_1": [1.3, 0.8],
        "8_2": [0.6, 0.5]},
    "9": {"def": [1, 0.8]},
    "10": {"10_1": [1.3, 0.8],
        "10_2": [0.8, 0.5]},
    "11": {"11_1": [1.6, 1],
        "11_2": [1.3, 0.8],
        "11_3": [1, 0.8]},
    "12": {"12_1": [0.6, 0.6],
        "12_2": [0.6, 0.6]},
    "13": {"13_1": [1, 0.8],
        "13_2": [1.4, 0.8],
        "13_3": [0.7, 0.5]},
    "14": {"14_1": [1.2, 1],
        "14_2": [1.5, 1],
        "14_3": [0.8, 0.6]},
    "15": {"15_1": [0.8, 0.5],
        "15_2": [1.2, 0.7],
        "15_3": [0.6, 0.5]},
    "16": {"16_1": [1, 0.8],
        "16_2": [0.8, 0.5]},
    "17": {"17_1": [1.3, 0.8],
        "17_2": [1, 0.8],
        "17_3": [1.2, 0.8],
        "17_4": [2, 1.2],
        "17_5": [1.7, 1],
        "17_6": [1.1, 0.8]},
    "18": {"18_1": [0.6, 0.5],
        "18_2": [0.6, 0.5]},
    "19": {"19_1": [1.1, 0.8],
        "19_2": [1, 0.8],
        "19_3": [1.6, 1],
        "19_4": [0.8, 0.5]},
    "20": {"20_1": [1, 0.8],
        "20_2": [0.6, 0.5]},
    "21": {"def": [0.6, 0.5]},
    "22": {"22_1": [1.1, 0.8],
        "22_2": [1.2, 0.8],
        "22_3": [1.7, 1],
        "22_4": [0.8, 0.5]},
    "23": {"23_1": [1.7, 1],
        "23_2": [1.2, 0.8],
        "23_3": [1.1, 0.8],
        "23_4": [0.7, 0.5]},
    "24": {"24_1": [0.6, 0.5],
        "24_2": [0.7, 0.5],
        "24_3": [0.6, 0.5]},
    "25": {"25_1": [1.3, 1],
        "25_2": [1, 0.6]},
    "26": {"26_1": [1.3, 0.8],
        "26_2": [1.2, 0.8],
        "26_3": [1.1, 0.8],
        "26_4": [1.8, 1],
        "26_5": [1, 0.8]},
    "27": {"27_1": [1.1, 0.8],
        "27_2": [1.3, 0.8],
        "27_3": [1, 0.8],
        "27_4": [1.8, 1],
        "27_5": [0.9, 0.5]},
    "28": {"28_1": [1.3, 0.8],
        "28_2": [1, 0.8],
        "28_3": [2, 1.2],
        "28_4": [1.2, 0.8],
        "28_5": [1.1, 0.8]},
    "29": {"29_1": [1, 0.8],
        "29_2": [1.4, 1],
        "29_3": [0.7, 0.5]},
    "30": {"30_1": [1, 0.8],
        "30_2": [1.2, 0.8],
        "30_3": [0.7, 0.5]},
    "31": {"31_1": [1, 0.8],
        "31_2": [1.3, 0.8],
        "31_3": [1.7, 1],
        "31_4": [0.8, 0.5]},
    "32": {"32_1": [1.1, 0.9],
        "32_2": [1.6, 0.9],
        "32_3": [1, 0.6]},
    "33": {"33_1": [1.8, 1],
        "33_2": [1.6, 1],
        "33_3": [1.7, 1],
        "33_4": [0.85, 0.5]},
    "34": {"34_1": [1.4, 1],
        "34_2": [0.8, 0.5]},
    "35": {"35_1": [1.3, 0.8],
        "35_2": [1, 0.8],
        "35_3": [0.8, 0.5]},
    "36": {"36_1": [1.5, 1],
        "36_2": [1, 0.8],
        "36_3": [0.7, 0.5]},
    "37": {"37_1": [1.6, 1],
        "37_2": [1.1, 0.8],
        "37_3": [1.2, 0.8],
        "37_4": [1, 0.8]},
    "38": {"38_1": [1.3, 0.8],
        "38_2": [1.1, 0.8],
        "38_3": [1, 0.8],
        "38_4": [0.7, 0.5]},
    "39": {"39_1": [1.7, 1],
        "39_2": [1.8, 1],
        "39_3": [0.9, 0.5]},
    "40": {"40_1": [1.1, 0.9],
        "40_2": [1.5, 1.1],
        "40_3": [0.8, 0.6]},
    "41": {"41_1": [1.8, 1],
        "41_2": [1.1, 0.8],
        "41_3": [1, 0.8],
        "41_4": [0.9, 0.5]},
    "42": {"42_1": [1.2, 0.8],
        "42_2": [1, 0.8],
        "42_3": [1.7, 1],
        "42_4": [1.1, 0.8],
        "42_5": [1.3, 0.8],
        "42_6": [0.8, 0.5]},
    "43": {"43_1": [1.1, 0.8],
        "43_2": [0.8, 0.5]},
    "44": {"44_1": [1.2, 0.8],
        "44_2": [1.3, 0.8],
        "44_3": [0.9, 0.5]},
    "45": {"45_1": [1.2, 0.8],
        "45_2": [1.3, 0.8],
        "45_3": [1.9, 1],
        "45_4": [1.8, 1],
        "45_5": [1.1, 0.8]},
    "46": {"46_1": [1.4, 1],
        "46_2": [1.2, 0.8],
        "46_3": [0.8, 0.5]},
    "47": {"47_1": [1.3, 0.8],
        "47_2": [0.7, 0.5]},
    "48": {"48_1": [1.4, 0.8],
        "48_2": [1.1, 0.8],
        "48_3": [0.6, 0.5]},
    "49": {"49_1": [1, 0.8],
        "49_2": [1.2, 0.8],
        "49_3": [0.7, 0.5]},
    "50": {"def": [1.3, 0.8]},
    "51": {"51_1": [1, 0.8],
        "51_2": [1.5, 1],
        "51_3": [0.8, 0.5]},
    "52": {"52_1": [0.7, 0.5],
        "52_2": [0.6, 0.5]},
    "53": {"def": [1.7, 1]},
    "54": {"54_1": [1.3, 1],
        "54_2": [2.1, 1.2],
        "54_3": [1.6, 1],
        "54_4": [1.2, 1]},
    "55": {"55_1": [1.1, 0.8],
        "55_2": [1.3, 0.8],
        "55_3": [1.2, 0.8],
        "55_4": [1.8, 1],
        "55_5": [1, 0.8]},
    "56": {"56_1": [1, 0.8],
        "56_2": [1.3, 0.8],
        "56_3": [0.9, 0.5]},
    "57": {"57_1": [1.3, 0.8],
        "57_2": [1.2, 0.8],
        "57_3": [1, 0.8],
        "57_4": [1.7, 1],
        "57_5": [0.9, 0.5]},
    "58": {"58_1": [1.6, 1],
        "58_2": [0.9, 0.5]},
    "59": {"59_1": [1, 0.8],
        "59_2": [1.7, 1],
        "59_3": [1.1, 0.8],
        "59_4": [0.8, 0.5]},
    "60": {"60_1": [1, 0.8],
        "60_2": [1.2, 0.8],
        "60_3": [0.7, 0.5]},
    "61": {"61_1": [1.2, 0.8],
        "61_2": [1, 0.8],
        "61_3": [1.4, 1],
        "61_4": [0.7, 0.5]},
    "62": {"62_1": [1, 0.8],
        "62_2": [1.2, 0.8],
        "62_3": [0.7, 0.5]},
    "63": {"63_1": [1.2, 0.8],
        "63_2": [1.3, 0.8],
        "63_3": [1, 0.8],
        "63_4": [1.8, 1],
        "63_5": [1.1, 0.8],
        "63_6": [0.8, 0.5]},
    "64": {"64_1": [1.4, 1],
        "64_2": [0.9, 0.5]},
    "65": {"65_1": [1.1, 0.8],
        "65_2": [1.6, 1],
        "65_3": [1.5, 1],
        "65_4": [1.2, 0.8],
        "65_5": [0.9, 0.5]},
    "66": {"66_1": [1, 0.8],
        "66_2": [1.6, 1],
        "66_3": [1.2, 0.8],
        "66_4": [0.7, 0.5]},
    "67": {"67_1": [1.5, 1],
        "67_2": [0.9, 0.5]},
    "68": {"68_1": [1.1, 0.8],
        "68_2": [1.3, 0.8],
        "68_3": [1.2, 0.8],
        "68_4": [1.8, 1],
        "68_5": [1, 0.8]},
    "69": {"69_1": [1, 0.8],
        "69_2": [1.2, 0.8],
        "69_3": [0.7, 0.5]},
    "70": {"70_1": [1, 0.8],
        "70_2": [1.2, 0.8],
        "70_3": [0.8, 0.5]},
    "71": {"71_1": [1, 0.8],
        "71_2": [1.5, 1],
        "71_3": [0.8, 0.5]},
    "72": {"72_1": [1.2, 0.8],
        "72_2": [1.6, 1],
        "72_3": [0.9, 0.5]},
    "73": {"73_1": [1, 0.8],
        "73_2": [1.5, 1],
        "73_3": [1.2, 0.8],
        "73_4": [0.9, 0.5]},
    "74": {"74_1": [1.3, 0.8],
        "74_2": [2, 1.2],
        "74_3": [1.1, 0.8]},
    "75": {"75_1": [1.2, 0.9],
        "75_2": [1.5, 1.1],
        "75_3": [0.9, 0.6]},
    "76": {"76_1": [1.4, 0.8],
        "76_2": [1.6, 1],
        "76_3": [1.8, 1],
        "76_4": [1.2, 0.8],
        "76_5": [2.1, 1.3],
        "76_6": [1, 0.8]},
    "77": {"77_1": [1.5, 1],
        "77_2": [0.9, 0.5]},
    "78": {"def": [2, 1.2]},
    "79": {"def": [1.8, 1]},
    "80": {"def": [0.6, 0.6]},
    "81": {"81_1": [0.6, 0.5],
        "81_2": [0.6, 0.5]},
    "82": {"def": [0.8, 0.5]},
    "83": {"83_1": [1, 0.8],
        "83_2": [1.3, 0.8],
        "83_3": [2, 1.2],
        "83_4": [1.8, 1],
        "83_5": [1.5, 1],
        "83_6": [1.1, 0.8]},
    "84": {"def": [0.6, 0.5]},
    "85": {"85_1": [1, 0.8],
        "85_2": [1.7, 1],
        "85_3": [1.1, 0.8]},
    "86": {"def": [0.6, 0.5]}
}
base_jur_list = {
    "a": [867, 1579],
    "b": [2573, 3087],
    "b-t": [5138, 6166],
    "c": [3509, 4211],
    "c-m": [5284, 6341],
    "d": [2808, 3370],
    "d-m": [3509, 4211],
    "d-t": [5138, 6166],
    "tb": [2808, 3370],
    "tm": [1751, 2101],
    "tr": [1124, 1579]
}
base_fiz_list = {
    "a": [867, 1579],
    "b": [3432, 4118],
    "b-t": [5138, 6166],
    "c": [3509, 4211],
    "c-m": [5284, 6341],
    "d": [2808, 3370],
    "d-m": [3509, 4211],
    "d-t": [5138, 6166],
    "tb": [2808, 3370],
    "tm": [1751, 2101],
    "tr": [1124, 1579]
}
k_city_in = 1.7
k_period = {"3": 0.5, "4": 0.6, "5": 0.65, "6": 0.7, "7": 0.8, "8": 0.9, "9": 0.95, "10": 1, "2": 0.4, "1": 0.3, "0": 0.2}
k_period_transit = 0.2
k_voditeli = {"0": 1, "1": 1.7, "2": 1.6, "3": 1.8}
k_voditeli_in_jur = 1
k_voditeli_in_fiz = 1.7
k_klass = {"m": 2.45, "0": 2.3, "1": 1.55, "2": 1.4, "3": 1, "4": 0.95, "5": 0.9, "6": 0.85, "7": 0.8, "8": 0.75, "9": 0.7, "10": 0.65, "11": 0.6, "12": 0.55, "13": 0.5, "def": 1}
k_pricep_jur = {"a": 1.16, "b": 1.16, "b-t": 1, "c": 1.4, "c-m": 1.25, "d": 1, "d-m": 1, "d-t": 1, "tb": 1, "tm": 1, "tr": 1.24}
k_pricep_fiz = {"a": 1.16, "b": 1.16, "b-t": 1, "c": 1.4, "c-m": 1.25, "d": 1, "d-m": 1, "d-t": 1, "tb": 1, "tm": 1, "tr": 1.24}
k_moshn = {"0": 0.6, "1": 1, "2": 1.1, "3": 1.2, "4": 1.4, "5": 1.6}
k_spisok_in_jur = 1.8
k_spisok_in_fiz = 1
k_spisok_islim = 1
k_spisok_notlim = 1.8
k_narush_yes = 1.5
k_narush_no = 1
is_jur = False
is_lim = True
is_pricep = False
has_narush = False

def calculate(answers):
    def get_answer(attr, answers):
        result = None
        for answer in answers:
            if answer[0] == attr:
                result = answer[1]
                break
        return str(result) if result is not None else None

    formula = u''
    is_jur = get_answer('vladelec', answers) == '2'
    is_lim = get_answer('spisok', answers) == '1'
    pricep = get_answer('pricep', answers)
    has_narush = get_answer('narusheniya', answers) == '2'
    period_fl = get_answer('period_fl', answers)
    period_ul = get_answer('period_ul', answers)
    period_in = get_answer('period_in', answers)
    voditeli = get_answer('voditeli', answers)
    moshnost = get_answer('moshnost', answers)
    tip_ts = get_answer('tip_ts', answers)
    usloviya = get_answer('usloviya', answers)
    region = get_answer('region', answers)
    city = get_answer('city', answers) or 'def'
    base_list = base_jur_list if is_jur else base_fiz_list
    base_min = base_list[tip_ts][0]
    base_max = base_list[tip_ts][1]
    k_ter = k_city_in if usloviya == '2' else (k_city[region][city][1] if tip_ts == 'tr' else k_city[region][city][0])
    kbm = get_answer('kbm', answers)
    k_bm = k_klass[kbm] if kbm is not None else k_klass['def']
    q = 1.8 # koefficient ogranichennyy spisok
    if is_jur:
        if usloviya == '2':
            q = k_spisok_in_jur
    else:
        if usloviya == '2':
            q = k_spisok_in_fiz
        else:
            if is_lim:
                q = k_spisok_islim
            else:
                q = k_spisok_notlim
    h = 1 # koefficient moshnost
    if moshnost:
        h = k_moshn[moshnost]
    n = 1 # koeff period ispolzov
    if period_fl is not None:
        n = k_period[period_fl]
    else:
        if period_ul is not None:
            n = k_period[period_ul]
        else:
            if period_in is not None:
                n = k_period[period_in]
            else:
                if usloviya == '1': # transit
                     n = k_period_transit

    v = 0
    w = 0
    if has_narush:
        x = k_narush_yes # koef narusheniya
        v = base_min * k_ter * 5
        w = base_max * k_ter * 5
    else:
        x = k_narush_no
        v = base_min * k_ter * 3
        w = base_max * k_ter * 3

    s = 1 # koeff voditeli
    if usloviya == '2': # inostranec
        if is_jur:
            s = k_voditeli_in_jur
        else:
            s = k_voditeli_in_fiz
    else:
        if voditeli is not None:
            s = k_voditeli[voditeli]
    f = 1 # koef pricep
    if pricep and pricep == '2':
        if is_jur:
            f = k_pricep_jur[tip_ts]
        else:
            f = k_pricep_fiz[tip_ts]
    if is_jur:
        if usloviya in ['0','3']: #standart her znaet chto
            if tip_ts in [u'b', u'b-t']:
                osago_min = base_min * k_ter * k_bm * q * h * n * x * f
                osago_max = base_max * k_ter * k_bm * q * h * n * x * f
                formula = u'ТБ × КТ × КБМ × КО × КМ × КС × КН × КПр'
            else:
                osago_min = base_min * k_ter * k_bm * q * f * n * x
                osago_max = base_max * k_ter * k_bm * q * f * n * x
                formula = u'ТБ × КТ × КБМ × КО × КС × КН × КПр'
        elif usloviya == '1': #transit
            if tip_ts in [u'b', u'b-t']:
                osago_min = base_min * k_spisok_notlim * h * k_period_transit * f
                osago_max = base_max * k_spisok_notlim * h * k_period_transit * f
                formula = u'ТБ × КО × КМ × КП × КПр'
            else:
                osago_min = base_min * k_spisok_notlim * k_period_transit * f
                osago_max = base_max * k_spisok_notlim * k_period_transit * f
                formula = u'ТБ × КО × КП × КПр'
        elif usloviya == '2': # inostranec
            if tip_ts in [u'b', u'b-t']:
                osago_min = base_min * k_ter * q * h * n * x * f
                osago_max = base_max * k_ter * q * h * n * x * f
                formula = u'ТБ × КТ × КБМ × КО × КМ × КП × КН × КПр'
            else:
                osago_min = base_min * k_ter * q * n * x * f
                osago_max = base_max * k_ter * q * n * x * f
                formula = u'ТБ × КТ × КБМ × КО × КП × КН × КПр'
    else:
        if usloviya in ['0','3']: #standart her znaet chto
            if tip_ts in [u'b', u'b-t']:
                osago_min = base_min * k_ter * k_bm * s * q * h * n * x
                osago_max = base_max * k_ter * k_bm * s * q * h * n * x
                formula = u'ТБ × КТ × КБМ × КВС × КО × КМ × КС × КН'
            else:
                osago_min = base_min * k_ter * k_bm * s * q * f * n * x
                osago_max = base_max * k_ter * k_bm * s * q * f * n * x
                formula = u'ТБ × КТ × КБМ × КВС × КО × КС × КН × КПр'
        elif usloviya == '1': #transit
            if tip_ts in [u'b', u'b-t']:
                osago_min = base_min * s * q * h * k_period_transit
                osago_max = base_max * s * q * h * k_period_transit
                formula = u'ТБ × КВС × КО × КМ × КП'
            else:
                osago_min = base_min * s * q * k_period_transit * f
                osago_max = base_max * s * q * k_period_transit * f
                formula = u'ТБ × КВС × КО × КП × КПр'
        elif usloviya == '2': # inostranec
            if tip_ts in [u'b', u'b-t']:
                osago_min = base_min * k_ter * q * h * n * x
                osago_max = base_max * k_ter * q * h * n * x
                formula = u'ТБ × КТ × КБМ × КВС × КО × КМ × КН × КН'
            else:
                osago_min = base_min * k_ter * q * n * x * f
                osago_max = base_max * k_ter * q * n * x * f
                formula = u'ТБ × КТ × КБМ × КО × КП × КН × КПр'

    if v < osago_min or w < osago_max:
        osago_min = v
        osago_max = w

    return osago_min, osago_max, formula